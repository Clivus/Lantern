Raspberry Pi Configuration

Check that the module PySerial is installed on the Raspberry

In the terminal, enter:

$ python -m pip install pyserial

 

Then clone the Maestro module repository :

$ git clone  https://github.com/FRC4564/Maestro

 

To communicate with the Maestro board you need a serial port. You can check the available ports by entering the command:

$ dmesg | grep tty

On the Raspberry Pi3, the serial port /dev/ttyAMAO is used by the embedded bluetooth module. We use the serial port /dev/ttySO to communicate with the Mini Maestro.

/dev/ttyAMAO
/dev/ttyAMA1


 
Basic code to use serial controller Maestro

To command the serial controller with Raspberry, a sequence of bytes need to be send via the serial port. The following code let the user send a position command to the several channels of a Mini Maestro with the Raspberry terminal.

For this we use the module Maestro.py previously downloaded (https://github.com/FRC4564/Maestro). Copy-paste the folder in the same folder as the code.

First, the serial port to communicate with the Maestro is intiliazied. Then, we write a function that receives data from the serial monitor and convert it into servo command.

servo.setTarget(0,2500)


#!/usr/bin/env python
# -*- coding: utf-8 -*-
import Maestro.maestro as maestro
import time
#define servo
servo = maestro.Controller(ttyStr='/dev/ttyAMAO')
min_imp=2000
max_imp=10000
step_imp=100
#infinite loop
while 1:
#user input
msg=raw_input("Enter servo id and command: YxZZZZ:  \n")
#convert msg into id and cmd
sep=msg.find("x")
m1=msg[:sep]
m2=msg[sep+1:]
servoId=int(m1)
servoCmd=int(m2)
#saturate input
servoId=min(max(0,servoId),6);
servoCmd=min(max(min_imp,servoCmd),max_imp);
print(msg)
print("servoId : {}    servoCmd : {} \n".format(servoId,servoCmd))
servo.setTarget(servoId,servoCmd)
time.sleep(0.1)
servo.close
